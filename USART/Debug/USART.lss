
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a92  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000b06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c89  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7b  00000000  00000000  0000293d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aac  00000000  00000000  000034b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00003f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c5f  00000000  00000000  00004200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f23  00000000  00000000  00004e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005d82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  74:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <T0_Init>:
		
									
void T0_FreqDividor(float32 Factor)
					{
						OCR0 = (Factor / 2.0) -1;
						Output_Config(
  7c:	13 be       	out	0x33, r1	; 51
  7e:	99 b7       	in	r25, 0x39	; 57
  80:	9c 7f       	andi	r25, 0xFC	; 252
  82:	99 bf       	out	0x39, r25	; 57
  84:	93 b7       	in	r25, 0x33	; 51
  86:	49 2b       	or	r20, r25
  88:	64 2b       	or	r22, r20
  8a:	86 2b       	or	r24, r22
  8c:	83 bf       	out	0x33, r24	; 51
  8e:	89 b7       	in	r24, 0x39	; 57
  90:	28 2b       	or	r18, r24
  92:	29 bf       	out	0x39, r18	; 57
  94:	08 95       	ret

00000096 <T0_PWM_OC0>:
					}
					
					
void T0_PWM_OC0(float32 DutyCycle,T0_Mode Mode,T0_CmpMode Cmp_Mode )
{
	switch (Mode)
  96:	48 34       	cpi	r20, 0x48	; 72
  98:	b9 f5       	brne	.+110    	; 0x108 <T0_PWM_OC0+0x72>
	{
		case PWMFAST:
						switch(Cmp_Mode)
  9a:	20 32       	cpi	r18, 0x20	; 32
  9c:	01 f1       	breq	.+64     	; 0xde <T0_PWM_OC0+0x48>
  9e:	20 33       	cpi	r18, 0x30	; 48
  a0:	99 f5       	brne	.+102    	; 0x108 <T0_PWM_OC0+0x72>
						{
							case PWMFAST_INVERT:
													OCR0= (((100-DutyCycle)/100.0) * 255)+ROUND_FACTOR;
  a2:	9b 01       	movw	r18, r22
  a4:	ac 01       	movw	r20, r24
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	88 ec       	ldi	r24, 0xC8	; 200
  ac:	92 e4       	ldi	r25, 0x42	; 66
  ae:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__subsf3>
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	48 ec       	ldi	r20, 0xC8	; 200
  b8:	52 e4       	ldi	r21, 0x42	; 66
  ba:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__divsf3>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	4f e7       	ldi	r20, 0x7F	; 127
  c4:	53 e4       	ldi	r21, 0x43	; 67
  c6:	0e 94 83 04 	call	0x906	; 0x906 <__mulsf3>
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	5f e3       	ldi	r21, 0x3F	; 63
  d2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__addsf3>
  d6:	0e 94 c6 03 	call	0x78c	; 0x78c <__fixunssfsi>
  da:	6c bf       	out	0x3c, r22	; 60
													break;
  dc:	08 95       	ret
							case PWMFAST_NONIVERT:
													OCR0= ((DutyCycle/100.0) * 255)+ROUND_FACTOR; 
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	48 ec       	ldi	r20, 0xC8	; 200
  e4:	52 e4       	ldi	r21, 0x42	; 66
  e6:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__divsf3>
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	4f e7       	ldi	r20, 0x7F	; 127
  f0:	53 e4       	ldi	r21, 0x43	; 67
  f2:	0e 94 83 04 	call	0x906	; 0x906 <__mulsf3>
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	5f e3       	ldi	r21, 0x3F	; 63
  fe:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__addsf3>
 102:	0e 94 c6 03 	call	0x78c	; 0x78c <__fixunssfsi>
 106:	6c bf       	out	0x3c, r22	; 60
 108:	08 95       	ret

0000010a <__vector_1>:
void Servo_Control_OC0(uint8 Deg);



ISR(INT0_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
	if(i==1)
 11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	89 f4       	brne	.+34     	; 0x146 <__vector_1+0x3c>
	{
		TCCR1B =0;
 124:	1e bc       	out	0x2e, r1	; 46
		pulse =TCNT1;
 126:	8c b5       	in	r24, 0x2c	; 44
 128:	9d b5       	in	r25, 0x2d	; 45
 12a:	a0 e0       	ldi	r26, 0x00	; 0
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <pulse>
 132:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <pulse+0x1>
 136:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <pulse+0x2>
 13a:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <pulse+0x3>
		TCNT1=0;
 13e:	1d bc       	out	0x2d, r1	; 45
 140:	1c bc       	out	0x2c, r1	; 44
		i=0;
 142:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
	if(i==0)
 146:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 14a:	81 11       	cpse	r24, r1
 14c:	06 c0       	rjmp	.+12     	; 0x15a <__vector_1+0x50>
	{
		TCCR1B |= 1<<CS10;
 14e:	8e b5       	in	r24, 0x2e	; 46
 150:	81 60       	ori	r24, 0x01	; 1
 152:	8e bd       	out	0x2e, r24	; 46
		i=1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	}
}
 15a:	bf 91       	pop	r27
 15c:	af 91       	pop	r26
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <Servo_Control_OC0>:

void Servo_Control_OC0(uint8 Deg)
{
	float64 Duty=0;
	Duty = (_15_POSTION) + (Deg/180.0) * (_165_POSTION - _15_POSTION) ;
	T0_PWM_OC0(Duty,PWMFAST,PWMFAST_NONIVERT);
 16c:	68 2f       	mov	r22, r24
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__floatsisf>
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	44 e3       	ldi	r20, 0x34	; 52
 17e:	53 e4       	ldi	r21, 0x43	; 67
 180:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__divsf3>
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	48 e4       	ldi	r20, 0x48	; 72
 18a:	51 e4       	ldi	r21, 0x41	; 65
 18c:	0e 94 83 04 	call	0x906	; 0x906 <__mulsf3>
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	40 ea       	ldi	r20, 0xA0	; 160
 196:	5f e3       	ldi	r21, 0x3F	; 63
 198:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__addsf3>
 19c:	20 e2       	ldi	r18, 0x20	; 32
 19e:	48 e4       	ldi	r20, 0x48	; 72
 1a0:	0e 94 4b 00 	call	0x96	; 0x96 <T0_PWM_OC0>
 1a4:	08 95       	ret

000001a6 <main>:


//char *a;
int main(void)
{
	UART_init(UART_DOUBLESPEEDMODE_TX_RX_ENABLED,UART_intterupt_Disabled,USART_PARITY_DISABLED_1STOP,USART_SEVEN_BITS_DATA,9600);
 1a6:	10 e8       	ldi	r17, 0x80	; 128
 1a8:	e1 2e       	mov	r14, r17
 1aa:	15 e2       	ldi	r17, 0x25	; 37
 1ac:	f1 2e       	mov	r15, r17
 1ae:	00 e0       	ldi	r16, 0x00	; 0
 1b0:	10 e0       	ldi	r17, 0x00	; 0
 1b2:	24 e0       	ldi	r18, 0x04	; 4
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	8a e1       	ldi	r24, 0x1A	; 26
 1ba:	0e 94 9b 02 	call	0x536	; 0x536 <UART_init>
	T0_Init(F_CPU_PRESCALE_64,PWMFAST,PWMFAST_NONIVERT,INT_DISABLED);
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	40 e2       	ldi	r20, 0x20	; 32
 1c2:	68 e4       	ldi	r22, 0x48	; 72
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	0e 94 3e 00 	call	0x7c	; 0x7c <T0_Init>
	Output_Config(PORTB_DIRREG_ADDRESS,PORTB_OUTBLOCK_ADDRESS,OUTPUT_PASS,3);
 1ca:	23 e0       	ldi	r18, 0x03	; 3
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	66 e3       	ldi	r22, 0x36	; 54
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	87 e3       	ldi	r24, 0x37	; 55
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Output_Config>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	87 ea       	ldi	r24, 0xA7	; 167
 1dc:	91 e6       	ldi	r25, 0x61	; 97
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <main+0x38>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x3e>
 1e4:	00 00       	nop
	_delay_ms(100);
	DDRB=0X0F;
 1e6:	8f e0       	ldi	r24, 0x0F	; 15
 1e8:	87 bb       	out	0x17, r24	; 23
	
	LCD_init();
 1ea:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_init>
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);
 1ee:	8c e0       	ldi	r24, 0x0C	; 12
 1f0:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_sendCommand>

	uint8 i = 15;
	
	DDRD = 0x0B;
 1f4:	8b e0       	ldi	r24, 0x0B	; 11
 1f6:	81 bb       	out	0x11, r24	; 17
 1f8:	83 ed       	ldi	r24, 0xD3	; 211
 1fa:	90 e3       	ldi	r25, 0x30	; 48
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x56>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x5c>
 202:	00 00       	nop
	_delay_ms(50);
	GICR |=1<<INT0 ;
 204:	8b b7       	in	r24, 0x3b	; 59
 206:	80 64       	ori	r24, 0x40	; 64
 208:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1<<ISC00;
 20a:	85 b7       	in	r24, 0x35	; 53
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	85 bf       	out	0x35, r24	; 53
	int16_t count_a = 0;

	sei();
 210:	78 94       	sei
		{
			_delay_ms(50);
			PORTD |=1<<PIND3;
			_delay_us(15);
			PORTD &= ~(1<<PIND3);
			count_a = pulse/58;
 212:	0f 2e       	mov	r0, r31
 214:	fa e3       	ldi	r31, 0x3A	; 58
 216:	8f 2e       	mov	r8, r31
 218:	91 2c       	mov	r9, r1
 21a:	a1 2c       	mov	r10, r1
 21c:	b1 2c       	mov	r11, r1
 21e:	f0 2d       	mov	r31, r0
}


//char *a;
int main(void)
{
 220:	0f 2e       	mov	r0, r31
 222:	ff e0       	ldi	r31, 0x0F	; 15
 224:	cf 2e       	mov	r12, r31
 226:	d1 2c       	mov	r13, r1
 228:	e1 2c       	mov	r14, r1
 22a:	f1 2c       	mov	r15, r1
 22c:	f0 2d       	mov	r31, r0
 22e:	83 ed       	ldi	r24, 0xD3	; 211
 230:	90 e3       	ldi	r25, 0x30	; 48
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <main+0x8c>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x92>
 238:	00 00       	nop
	{
		
		for(i=15;i<=165;i++)
		{
			_delay_ms(50);
			PORTD |=1<<PIND3;
 23a:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	95 e0       	ldi	r25, 0x05	; 5
 23e:	9a 95       	dec	r25
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0x98>
			_delay_us(15);
			PORTD &= ~(1<<PIND3);
 242:	93 98       	cbi	0x12, 3	; 18
			count_a = pulse/58;
 244:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <pulse>
 248:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <pulse+0x1>
 24c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <pulse+0x2>
 250:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <pulse+0x3>
 254:	a5 01       	movw	r20, r10
 256:	94 01       	movw	r18, r8
 258:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__udivmodsi4>
 25c:	29 01       	movw	r4, r18
 25e:	3a 01       	movw	r6, r20
			
			Servo_Control_OC0(i);
 260:	8c 2d       	mov	r24, r12
 262:	0e 94 b6 00 	call	0x16c	; 0x16c <Servo_Control_OC0>
			LCD_clearScreen();
 266:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_clearScreen>
			LCD_displayInt(i);
 26a:	c7 01       	movw	r24, r14
 26c:	b6 01       	movw	r22, r12
 26e:	0e 94 49 02 	call	0x492	; 0x492 <LCD_displayInt>
			LCD_goToRowColumn(1,0);
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_goToRowColumn>
			LCD_displayInt(count_a);
 27a:	b2 01       	movw	r22, r4
 27c:	55 0c       	add	r5, r5
 27e:	88 0b       	sbc	r24, r24
 280:	99 0b       	sbc	r25, r25
 282:	0e 94 49 02 	call	0x492	; 0x492 <LCD_displayInt>
			UART_sendByte(200);
 286:	88 ec       	ldi	r24, 0xC8	; 200
 288:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <UART_sendByte>
			UART_sendByte(i);
 28c:	8c 2d       	mov	r24, r12
 28e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <UART_sendByte>
			UART_sendByte(count_a);
 292:	84 2d       	mov	r24, r4
 294:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <UART_sendByte>
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	c8 1a       	sub	r12, r24
 29c:	d8 0a       	sbc	r13, r24
 29e:	e8 0a       	sbc	r14, r24
 2a0:	f8 0a       	sbc	r15, r24

	sei();
	while (1)
	{
		
		for(i=15;i<=165;i++)
 2a2:	96 ea       	ldi	r25, 0xA6	; 166
 2a4:	c9 16       	cp	r12, r25
 2a6:	d1 04       	cpc	r13, r1
 2a8:	e1 04       	cpc	r14, r1
 2aa:	f1 04       	cpc	r15, r1
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <main+0x10a>
 2ae:	bf cf       	rjmp	.-130    	; 0x22e <main+0x88>
 2b0:	0f 2e       	mov	r0, r31
 2b2:	f5 ea       	ldi	r31, 0xA5	; 165
 2b4:	cf 2e       	mov	r12, r31
 2b6:	d1 2c       	mov	r13, r1
 2b8:	e1 2c       	mov	r14, r1
 2ba:	f1 2c       	mov	r15, r1
 2bc:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2be:	83 ed       	ldi	r24, 0xD3	; 211
 2c0:	90 e3       	ldi	r25, 0x30	; 48
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x11c>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x122>
 2c8:	00 00       	nop
		}
		
		for(i=165;i>15;i--)
		{
			_delay_ms(50);
			PORTD |=1<<PIND3;
 2ca:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2cc:	95 e0       	ldi	r25, 0x05	; 5
 2ce:	9a 95       	dec	r25
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <main+0x128>
			_delay_us(15);
			PORTD &= ~(1<<PIND3);
 2d2:	93 98       	cbi	0x12, 3	; 18
			count_a = pulse/58;
 2d4:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <pulse>
 2d8:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <pulse+0x1>
 2dc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <pulse+0x2>
 2e0:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <pulse+0x3>
 2e4:	a5 01       	movw	r20, r10
 2e6:	94 01       	movw	r18, r8
 2e8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__udivmodsi4>
 2ec:	29 01       	movw	r4, r18
 2ee:	3a 01       	movw	r6, r20
			
			Servo_Control_OC0(i);
 2f0:	8c 2d       	mov	r24, r12
 2f2:	0e 94 b6 00 	call	0x16c	; 0x16c <Servo_Control_OC0>
			LCD_clearScreen();
 2f6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_clearScreen>
			LCD_displayInt(i);
 2fa:	c7 01       	movw	r24, r14
 2fc:	b6 01       	movw	r22, r12
 2fe:	0e 94 49 02 	call	0x492	; 0x492 <LCD_displayInt>
			LCD_goToRowColumn(1,0);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_goToRowColumn>
			LCD_displayInt(count_a);
 30a:	b2 01       	movw	r22, r4
 30c:	55 0c       	add	r5, r5
 30e:	88 0b       	sbc	r24, r24
 310:	99 0b       	sbc	r25, r25
 312:	0e 94 49 02 	call	0x492	; 0x492 <LCD_displayInt>
			UART_sendByte(200);
 316:	88 ec       	ldi	r24, 0xC8	; 200
 318:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <UART_sendByte>
			UART_sendByte(i);
 31c:	8c 2d       	mov	r24, r12
 31e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <UART_sendByte>
			UART_sendByte(count_a);
 322:	84 2d       	mov	r24, r4
 324:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <UART_sendByte>
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	c8 1a       	sub	r12, r24
 32c:	d1 08       	sbc	r13, r1
 32e:	e1 08       	sbc	r14, r1
 330:	f1 08       	sbc	r15, r1
			UART_sendByte(200);
			UART_sendByte(i);
			UART_sendByte(count_a);
		}
		
		for(i=165;i>15;i--)
 332:	9f e0       	ldi	r25, 0x0F	; 15
 334:	c9 16       	cp	r12, r25
 336:	d1 04       	cpc	r13, r1
 338:	e1 04       	cpc	r14, r1
 33a:	f1 04       	cpc	r15, r1
 33c:	09 f0       	breq	.+2      	; 0x340 <main+0x19a>
 33e:	bf cf       	rjmp	.-130    	; 0x2be <main+0x118>
 340:	6f cf       	rjmp	.-290    	; 0x220 <main+0x7a>

00000342 <LCD_sendCommand>:
void LCD_shiftEntireLeft(void){
	LCD_sendCommand(SHIFT_ENTIRE_DISPLAY_LEFT);
}

void LCD_shiftEntireRight(void){
	LCD_sendCommand(SHIFT_ENTIRE_DISPLAY_RIGHT);
 342:	d8 98       	cbi	0x1b, 0	; 27
 344:	d9 98       	cbi	0x1b, 1	; 27
 346:	e9 ef       	ldi	r30, 0xF9	; 249
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <LCD_sendCommand+0x8>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <LCD_sendCommand+0xe>
 350:	00 00       	nop
 352:	da 9a       	sbi	0x1b, 2	; 27
 354:	e9 ef       	ldi	r30, 0xF9	; 249
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	31 97       	sbiw	r30, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <LCD_sendCommand+0x16>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <LCD_sendCommand+0x1c>
 35e:	00 00       	nop
 360:	9b b3       	in	r25, 0x1b	; 27
 362:	9f 70       	andi	r25, 0x0F	; 15
 364:	9b bb       	out	0x1b, r25	; 27
 366:	9b b3       	in	r25, 0x1b	; 27
 368:	28 2f       	mov	r18, r24
 36a:	20 7f       	andi	r18, 0xF0	; 240
 36c:	92 2b       	or	r25, r18
 36e:	9b bb       	out	0x1b, r25	; 27
 370:	e9 ef       	ldi	r30, 0xF9	; 249
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	31 97       	sbiw	r30, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <LCD_sendCommand+0x32>
 378:	00 c0       	rjmp	.+0      	; 0x37a <LCD_sendCommand+0x38>
 37a:	00 00       	nop
 37c:	da 98       	cbi	0x1b, 2	; 27
 37e:	e9 ef       	ldi	r30, 0xF9	; 249
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_sendCommand+0x40>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_sendCommand+0x46>
 388:	00 00       	nop
 38a:	da 9a       	sbi	0x1b, 2	; 27
 38c:	e9 ef       	ldi	r30, 0xF9	; 249
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_sendCommand+0x4e>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_sendCommand+0x54>
 396:	00 00       	nop
 398:	9b b3       	in	r25, 0x1b	; 27
 39a:	9f 70       	andi	r25, 0x0F	; 15
 39c:	9b bb       	out	0x1b, r25	; 27
 39e:	2b b3       	in	r18, 0x1b	; 27
 3a0:	f0 e1       	ldi	r31, 0x10	; 16
 3a2:	8f 9f       	mul	r24, r31
 3a4:	c0 01       	movw	r24, r0
 3a6:	11 24       	eor	r1, r1
 3a8:	82 2b       	or	r24, r18
 3aa:	8b bb       	out	0x1b, r24	; 27
 3ac:	89 ef       	ldi	r24, 0xF9	; 249
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LCD_sendCommand+0x6e>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <LCD_sendCommand+0x74>
 3b6:	00 00       	nop
 3b8:	da 98       	cbi	0x1b, 2	; 27
 3ba:	e9 ef       	ldi	r30, 0xF9	; 249
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	31 97       	sbiw	r30, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <LCD_sendCommand+0x7c>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <LCD_sendCommand+0x82>
 3c4:	00 00       	nop
 3c6:	08 95       	ret

000003c8 <LCD_init>:
 3c8:	8a b3       	in	r24, 0x1a	; 26
 3ca:	87 60       	ori	r24, 0x07	; 7
 3cc:	8a bb       	out	0x1a, r24	; 26
 3ce:	8a b3       	in	r24, 0x1a	; 26
 3d0:	80 6f       	ori	r24, 0xF0	; 240
 3d2:	8a bb       	out	0x1a, r24	; 26
 3d4:	83 e3       	ldi	r24, 0x33	; 51
 3d6:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_sendCommand>
 3da:	82 e3       	ldi	r24, 0x32	; 50
 3dc:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_sendCommand>
 3e0:	88 e2       	ldi	r24, 0x28	; 40
 3e2:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_sendCommand>
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_sendCommand>
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_sendCommand>
 3f2:	8e e0       	ldi	r24, 0x0E	; 14
 3f4:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_sendCommand>
 3f8:	08 95       	ret

000003fa <LCD_displayChar>:
 3fa:	d8 9a       	sbi	0x1b, 0	; 27
 3fc:	d9 98       	cbi	0x1b, 1	; 27
 3fe:	da 9a       	sbi	0x1b, 2	; 27
 400:	e9 ef       	ldi	r30, 0xF9	; 249
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	31 97       	sbiw	r30, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	9b b3       	in	r25, 0x1b	; 27
 40e:	9f 70       	andi	r25, 0x0F	; 15
 410:	9b bb       	out	0x1b, r25	; 27
 412:	9b b3       	in	r25, 0x1b	; 27
 414:	28 2f       	mov	r18, r24
 416:	20 7f       	andi	r18, 0xF0	; 240
 418:	92 2b       	or	r25, r18
 41a:	9b bb       	out	0x1b, r25	; 27
 41c:	e9 ef       	ldi	r30, 0xF9	; 249
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	31 97       	sbiw	r30, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 426:	00 00       	nop
 428:	da 98       	cbi	0x1b, 2	; 27
 42a:	e9 ef       	ldi	r30, 0xF9	; 249
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	31 97       	sbiw	r30, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 434:	00 00       	nop
 436:	da 9a       	sbi	0x1b, 2	; 27
 438:	9b b3       	in	r25, 0x1b	; 27
 43a:	9f 70       	andi	r25, 0x0F	; 15
 43c:	9b bb       	out	0x1b, r25	; 27
 43e:	2b b3       	in	r18, 0x1b	; 27
 440:	f0 e1       	ldi	r31, 0x10	; 16
 442:	8f 9f       	mul	r24, r31
 444:	c0 01       	movw	r24, r0
 446:	11 24       	eor	r1, r1
 448:	82 2b       	or	r24, r18
 44a:	8b bb       	out	0x1b, r24	; 27
 44c:	89 ef       	ldi	r24, 0xF9	; 249
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 454:	00 c0       	rjmp	.+0      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 456:	00 00       	nop
 458:	e9 ef       	ldi	r30, 0xF9	; 249
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	31 97       	sbiw	r30, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 462:	00 00       	nop
 464:	da 98       	cbi	0x1b, 2	; 27
 466:	89 ef       	ldi	r24, 0xF9	; 249
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 470:	00 00       	nop
 472:	08 95       	ret

00000474 <LCD_displayString>:
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	ec 01       	movw	r28, r24
 47a:	88 81       	ld	r24, Y
 47c:	88 23       	and	r24, r24
 47e:	31 f0       	breq	.+12     	; 0x48c <LCD_displayString+0x18>
 480:	21 96       	adiw	r28, 0x01	; 1
 482:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_displayChar>
 486:	89 91       	ld	r24, Y+
 488:	81 11       	cpse	r24, r1
 48a:	fb cf       	rjmp	.-10     	; 0x482 <LCD_displayString+0xe>
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	08 95       	ret

00000492 <LCD_displayInt>:
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	60 97       	sbiw	r28, 0x10	; 16
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	f8 94       	cli
 4a0:	de bf       	out	0x3e, r29	; 62
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	cd bf       	out	0x3d, r28	; 61
 4a6:	dc 01       	movw	r26, r24
 4a8:	cb 01       	movw	r24, r22
 4aa:	4a e0       	ldi	r20, 0x0A	; 10
 4ac:	be 01       	movw	r22, r28
 4ae:	6f 5f       	subi	r22, 0xFF	; 255
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	0e 94 12 05 	call	0xa24	; 0xa24 <__itoa_ncheck>
 4b6:	ce 01       	movw	r24, r28
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_displayString>
 4be:	60 96       	adiw	r28, 0x10	; 16
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	cd bf       	out	0x3d, r28	; 61
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

000004d0 <LCD_clearScreen>:
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_sendCommand>
 4d6:	08 95       	ret

000004d8 <LCD_goToRowColumn>:
}


void LCD_goToRowColumn(uint8 row,uint8 column){
	uint8 address = 0;
	switch (row){
 4d8:	88 23       	and	r24, r24
 4da:	29 f0       	breq	.+10     	; 0x4e6 <LCD_goToRowColumn+0xe>
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	11 f4       	brne	.+4      	; 0x4e4 <LCD_goToRowColumn+0xc>
		case 0:
			address=column|0x00;
			break;
		case 1:
			address=column|0x40;
 4e0:	60 64       	ori	r22, 0x40	; 64
			break;
 4e2:	01 c0       	rjmp	.+2      	; 0x4e6 <LCD_goToRowColumn+0xe>
	LCD_sendCommand(SHIFT_ENTIRE_DISPLAY_RIGHT);
}


void LCD_goToRowColumn(uint8 row,uint8 column){
	uint8 address = 0;
 4e4:	60 e0       	ldi	r22, 0x00	; 0
			break;
		case 1:
			address=column|0x40;
			break;
	}
	LCD_sendCommand(DDRAM_CONSTANT|address);
 4e6:	86 2f       	mov	r24, r22
 4e8:	80 68       	ori	r24, 0x80	; 128
 4ea:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_sendCommand>
 4ee:	08 95       	ret

000004f0 <Output_Config>:
	}
	
	void Output_Config(
	volatile IO_size * DIR_Reg,volatile IO_size * Output_ModeReg,
	Output_Mode Mode,uint8 pin_Number)
	{
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	ec 01       	movw	r28, r24
 4f6:	db 01       	movw	r26, r22
		CLEAR_BIT(*DIR_Reg , pin_Number);
 4f8:	88 81       	ld	r24, Y
 4fa:	e1 e0       	ldi	r30, 0x01	; 1
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	02 2e       	mov	r0, r18
 500:	02 c0       	rjmp	.+4      	; 0x506 <Output_Config+0x16>
 502:	ee 0f       	add	r30, r30
 504:	ff 1f       	adc	r31, r31
 506:	0a 94       	dec	r0
 508:	e2 f7       	brpl	.-8      	; 0x502 <Output_Config+0x12>
 50a:	9e 2f       	mov	r25, r30
 50c:	90 95       	com	r25
 50e:	89 23       	and	r24, r25
 510:	88 83       	st	Y, r24
		*DIR_Reg |= (OUTPUT << pin_Number);
 512:	88 81       	ld	r24, Y
 514:	e8 2b       	or	r30, r24
 516:	e8 83       	st	Y, r30
		
		CLEAR_BIT(*Output_ModeReg , pin_Number);
 518:	8c 91       	ld	r24, X
 51a:	98 23       	and	r25, r24
 51c:	9c 93       	st	X, r25
		*Output_ModeReg |= (Mode << pin_Number);
 51e:	8c 91       	ld	r24, X
 520:	50 e0       	ldi	r21, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <Output_Config+0x38>
 524:	44 0f       	add	r20, r20
 526:	55 1f       	adc	r21, r21
 528:	2a 95       	dec	r18
 52a:	e2 f7       	brpl	.-8      	; 0x524 <Output_Config+0x34>
 52c:	48 2b       	or	r20, r24
 52e:	4c 93       	st	X, r20
	}
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <UART_init>:
 */

#include "uart.h"
 
void UART_init(USART_Mode Mode,USART_Interrupts Interrupt_State,USART_ControlFrame Controls ,USART_DATAFRAME  Data_width,USART_BUADRATE Buad)
{
 536:	ef 92       	push	r14
 538:	ff 92       	push	r15
 53a:	0f 93       	push	r16
 53c:	1f 93       	push	r17
	UCSRA=0;
 53e:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0;
 540:	1a b8       	out	0x0a, r1	; 10
	UCSRC=0;
 542:	10 bc       	out	0x20, r1	; 32
	
	UCSRA |= (Mode & 0x02) ;
 544:	3b b1       	in	r19, 0x0b	; 11
 546:	58 2f       	mov	r21, r24
 548:	52 70       	andi	r21, 0x02	; 2
 54a:	35 2b       	or	r19, r21
 54c:	3b b9       	out	0x0b, r19	; 11
	UCSRB |= (Mode & 0x18) | (Interrupt_State & 0xE0);
 54e:	3a b1       	in	r19, 0x0a	; 10
 550:	96 2f       	mov	r25, r22
 552:	90 7e       	andi	r25, 0xE0	; 224
 554:	93 2b       	or	r25, r19
 556:	38 2f       	mov	r19, r24
 558:	38 71       	andi	r19, 0x18	; 24
 55a:	93 2b       	or	r25, r19
 55c:	9a b9       	out	0x0a, r25	; 10
	UCSRC |= (Mode & 0x41) | (Controls & 0x38) | (Data_width & 0x06);
 55e:	90 b5       	in	r25, 0x20	; 32
 560:	32 2f       	mov	r19, r18
 562:	36 70       	andi	r19, 0x06	; 6
 564:	93 2b       	or	r25, r19
 566:	48 73       	andi	r20, 0x38	; 56
 568:	49 2b       	or	r20, r25
 56a:	98 2f       	mov	r25, r24
 56c:	91 74       	andi	r25, 0x41	; 65
 56e:	49 2b       	or	r20, r25
 570:	40 bd       	out	0x20, r20	; 32
	
	if(Data_width == USART_NINE_BITS_DATA)
 572:	26 30       	cpi	r18, 0x06	; 6
 574:	09 f4       	brne	.+2      	; 0x578 <UART_init+0x42>
	  {SET_BIT(UCSRB,UCSZ2);}
 576:	52 9a       	sbi	0x0a, 2	; 10
	
	switch(Mode)
 578:	82 31       	cpi	r24, 0x12	; 18
 57a:	21 f0       	breq	.+8      	; 0x584 <UART_init+0x4e>
 57c:	8a 31       	cpi	r24, 0x1A	; 26
 57e:	11 f0       	breq	.+4      	; 0x584 <UART_init+0x4e>
 580:	8a 30       	cpi	r24, 0x0A	; 10
 582:	e1 f4       	brne	.+56     	; 0x5bc <UART_init+0x86>
 584:	c8 01       	movw	r24, r16
 586:	b7 01       	movw	r22, r14
	{
		case UART_DOUBLESPEEDMODE_RX_ENABLED:
		case UART_DOUBLESPEEDMODE_TX_ENABLED:
		case UART_DOUBLESPEEDMODE_TX_RX_ENABLED:
		UBRRH= ((uint8)(F_CPU/(8.0*Buad) - 1) >>8);
 588:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
 58c:	20 e0       	ldi	r18, 0x00	; 0
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	40 e0       	ldi	r20, 0x00	; 0
 592:	51 e4       	ldi	r21, 0x41	; 65
 594:	0e 94 83 04 	call	0x906	; 0x906 <__mulsf3>
 598:	9b 01       	movw	r18, r22
 59a:	ac 01       	movw	r20, r24
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	74 e2       	ldi	r23, 0x24	; 36
 5a0:	84 e7       	ldi	r24, 0x74	; 116
 5a2:	99 e4       	ldi	r25, 0x49	; 73
 5a4:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__divsf3>
 5a8:	20 e0       	ldi	r18, 0x00	; 0
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	40 e8       	ldi	r20, 0x80	; 128
 5ae:	5f e3       	ldi	r21, 0x3F	; 63
 5b0:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__subsf3>
 5b4:	0e 94 c6 03 	call	0x78c	; 0x78c <__fixunssfsi>
 5b8:	10 bc       	out	0x20, r1	; 32
		UBRRL= (uint8)(F_CPU/(8.0*Buad) - 1);
 5ba:	69 b9       	out	0x09, r22	; 9
		break;
	                         
											
		
	}
}
 5bc:	1f 91       	pop	r17
 5be:	0f 91       	pop	r16
 5c0:	ff 90       	pop	r15
 5c2:	ef 90       	pop	r14
 5c4:	08 95       	ret

000005c6 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
 5c6:	5d 9b       	sbis	0x0b, 5	; 11
 5c8:	fe cf       	rjmp	.-4      	; 0x5c6 <UART_sendByte>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
 5ca:	8c b9       	out	0x0c, r24	; 12
 5cc:	08 95       	ret

000005ce <__subsf3>:
 5ce:	50 58       	subi	r21, 0x80	; 128

000005d0 <__addsf3>:
 5d0:	bb 27       	eor	r27, r27
 5d2:	aa 27       	eor	r26, r26
 5d4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__addsf3x>
 5d8:	0c 94 49 04 	jmp	0x892	; 0x892 <__fp_round>
 5dc:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_pscA>
 5e0:	38 f0       	brcs	.+14     	; 0x5f0 <__addsf3+0x20>
 5e2:	0e 94 42 04 	call	0x884	; 0x884 <__fp_pscB>
 5e6:	20 f0       	brcs	.+8      	; 0x5f0 <__addsf3+0x20>
 5e8:	39 f4       	brne	.+14     	; 0x5f8 <__addsf3+0x28>
 5ea:	9f 3f       	cpi	r25, 0xFF	; 255
 5ec:	19 f4       	brne	.+6      	; 0x5f4 <__addsf3+0x24>
 5ee:	26 f4       	brtc	.+8      	; 0x5f8 <__addsf3+0x28>
 5f0:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_nan>
 5f4:	0e f4       	brtc	.+2      	; 0x5f8 <__addsf3+0x28>
 5f6:	e0 95       	com	r30
 5f8:	e7 fb       	bst	r30, 7
 5fa:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>

000005fe <__addsf3x>:
 5fe:	e9 2f       	mov	r30, r25
 600:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_split3>
 604:	58 f3       	brcs	.-42     	; 0x5dc <__addsf3+0xc>
 606:	ba 17       	cp	r27, r26
 608:	62 07       	cpc	r22, r18
 60a:	73 07       	cpc	r23, r19
 60c:	84 07       	cpc	r24, r20
 60e:	95 07       	cpc	r25, r21
 610:	20 f0       	brcs	.+8      	; 0x61a <__addsf3x+0x1c>
 612:	79 f4       	brne	.+30     	; 0x632 <__addsf3x+0x34>
 614:	a6 f5       	brtc	.+104    	; 0x67e <__addsf3x+0x80>
 616:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_zero>
 61a:	0e f4       	brtc	.+2      	; 0x61e <__addsf3x+0x20>
 61c:	e0 95       	com	r30
 61e:	0b 2e       	mov	r0, r27
 620:	ba 2f       	mov	r27, r26
 622:	a0 2d       	mov	r26, r0
 624:	0b 01       	movw	r0, r22
 626:	b9 01       	movw	r22, r18
 628:	90 01       	movw	r18, r0
 62a:	0c 01       	movw	r0, r24
 62c:	ca 01       	movw	r24, r20
 62e:	a0 01       	movw	r20, r0
 630:	11 24       	eor	r1, r1
 632:	ff 27       	eor	r31, r31
 634:	59 1b       	sub	r21, r25
 636:	99 f0       	breq	.+38     	; 0x65e <__addsf3x+0x60>
 638:	59 3f       	cpi	r21, 0xF9	; 249
 63a:	50 f4       	brcc	.+20     	; 0x650 <__addsf3x+0x52>
 63c:	50 3e       	cpi	r21, 0xE0	; 224
 63e:	68 f1       	brcs	.+90     	; 0x69a <__addsf3x+0x9c>
 640:	1a 16       	cp	r1, r26
 642:	f0 40       	sbci	r31, 0x00	; 0
 644:	a2 2f       	mov	r26, r18
 646:	23 2f       	mov	r18, r19
 648:	34 2f       	mov	r19, r20
 64a:	44 27       	eor	r20, r20
 64c:	58 5f       	subi	r21, 0xF8	; 248
 64e:	f3 cf       	rjmp	.-26     	; 0x636 <__addsf3x+0x38>
 650:	46 95       	lsr	r20
 652:	37 95       	ror	r19
 654:	27 95       	ror	r18
 656:	a7 95       	ror	r26
 658:	f0 40       	sbci	r31, 0x00	; 0
 65a:	53 95       	inc	r21
 65c:	c9 f7       	brne	.-14     	; 0x650 <__addsf3x+0x52>
 65e:	7e f4       	brtc	.+30     	; 0x67e <__addsf3x+0x80>
 660:	1f 16       	cp	r1, r31
 662:	ba 0b       	sbc	r27, r26
 664:	62 0b       	sbc	r22, r18
 666:	73 0b       	sbc	r23, r19
 668:	84 0b       	sbc	r24, r20
 66a:	ba f0       	brmi	.+46     	; 0x69a <__addsf3x+0x9c>
 66c:	91 50       	subi	r25, 0x01	; 1
 66e:	a1 f0       	breq	.+40     	; 0x698 <__addsf3x+0x9a>
 670:	ff 0f       	add	r31, r31
 672:	bb 1f       	adc	r27, r27
 674:	66 1f       	adc	r22, r22
 676:	77 1f       	adc	r23, r23
 678:	88 1f       	adc	r24, r24
 67a:	c2 f7       	brpl	.-16     	; 0x66c <__addsf3x+0x6e>
 67c:	0e c0       	rjmp	.+28     	; 0x69a <__addsf3x+0x9c>
 67e:	ba 0f       	add	r27, r26
 680:	62 1f       	adc	r22, r18
 682:	73 1f       	adc	r23, r19
 684:	84 1f       	adc	r24, r20
 686:	48 f4       	brcc	.+18     	; 0x69a <__addsf3x+0x9c>
 688:	87 95       	ror	r24
 68a:	77 95       	ror	r23
 68c:	67 95       	ror	r22
 68e:	b7 95       	ror	r27
 690:	f7 95       	ror	r31
 692:	9e 3f       	cpi	r25, 0xFE	; 254
 694:	08 f0       	brcs	.+2      	; 0x698 <__addsf3x+0x9a>
 696:	b0 cf       	rjmp	.-160    	; 0x5f8 <__addsf3+0x28>
 698:	93 95       	inc	r25
 69a:	88 0f       	add	r24, r24
 69c:	08 f0       	brcs	.+2      	; 0x6a0 <__addsf3x+0xa2>
 69e:	99 27       	eor	r25, r25
 6a0:	ee 0f       	add	r30, r30
 6a2:	97 95       	ror	r25
 6a4:	87 95       	ror	r24
 6a6:	08 95       	ret

000006a8 <__divsf3>:
 6a8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__divsf3x>
 6ac:	0c 94 49 04 	jmp	0x892	; 0x892 <__fp_round>
 6b0:	0e 94 42 04 	call	0x884	; 0x884 <__fp_pscB>
 6b4:	58 f0       	brcs	.+22     	; 0x6cc <__divsf3+0x24>
 6b6:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_pscA>
 6ba:	40 f0       	brcs	.+16     	; 0x6cc <__divsf3+0x24>
 6bc:	29 f4       	brne	.+10     	; 0x6c8 <__divsf3+0x20>
 6be:	5f 3f       	cpi	r21, 0xFF	; 255
 6c0:	29 f0       	breq	.+10     	; 0x6cc <__divsf3+0x24>
 6c2:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 6c6:	51 11       	cpse	r21, r1
 6c8:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_szero>
 6cc:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_nan>

000006d0 <__divsf3x>:
 6d0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_split3>
 6d4:	68 f3       	brcs	.-38     	; 0x6b0 <__divsf3+0x8>

000006d6 <__divsf3_pse>:
 6d6:	99 23       	and	r25, r25
 6d8:	b1 f3       	breq	.-20     	; 0x6c6 <__divsf3+0x1e>
 6da:	55 23       	and	r21, r21
 6dc:	91 f3       	breq	.-28     	; 0x6c2 <__divsf3+0x1a>
 6de:	95 1b       	sub	r25, r21
 6e0:	55 0b       	sbc	r21, r21
 6e2:	bb 27       	eor	r27, r27
 6e4:	aa 27       	eor	r26, r26
 6e6:	62 17       	cp	r22, r18
 6e8:	73 07       	cpc	r23, r19
 6ea:	84 07       	cpc	r24, r20
 6ec:	38 f0       	brcs	.+14     	; 0x6fc <__divsf3_pse+0x26>
 6ee:	9f 5f       	subi	r25, 0xFF	; 255
 6f0:	5f 4f       	sbci	r21, 0xFF	; 255
 6f2:	22 0f       	add	r18, r18
 6f4:	33 1f       	adc	r19, r19
 6f6:	44 1f       	adc	r20, r20
 6f8:	aa 1f       	adc	r26, r26
 6fa:	a9 f3       	breq	.-22     	; 0x6e6 <__divsf3_pse+0x10>
 6fc:	35 d0       	rcall	.+106    	; 0x768 <__divsf3_pse+0x92>
 6fe:	0e 2e       	mov	r0, r30
 700:	3a f0       	brmi	.+14     	; 0x710 <__divsf3_pse+0x3a>
 702:	e0 e8       	ldi	r30, 0x80	; 128
 704:	32 d0       	rcall	.+100    	; 0x76a <__divsf3_pse+0x94>
 706:	91 50       	subi	r25, 0x01	; 1
 708:	50 40       	sbci	r21, 0x00	; 0
 70a:	e6 95       	lsr	r30
 70c:	00 1c       	adc	r0, r0
 70e:	ca f7       	brpl	.-14     	; 0x702 <__divsf3_pse+0x2c>
 710:	2b d0       	rcall	.+86     	; 0x768 <__divsf3_pse+0x92>
 712:	fe 2f       	mov	r31, r30
 714:	29 d0       	rcall	.+82     	; 0x768 <__divsf3_pse+0x92>
 716:	66 0f       	add	r22, r22
 718:	77 1f       	adc	r23, r23
 71a:	88 1f       	adc	r24, r24
 71c:	bb 1f       	adc	r27, r27
 71e:	26 17       	cp	r18, r22
 720:	37 07       	cpc	r19, r23
 722:	48 07       	cpc	r20, r24
 724:	ab 07       	cpc	r26, r27
 726:	b0 e8       	ldi	r27, 0x80	; 128
 728:	09 f0       	breq	.+2      	; 0x72c <__divsf3_pse+0x56>
 72a:	bb 0b       	sbc	r27, r27
 72c:	80 2d       	mov	r24, r0
 72e:	bf 01       	movw	r22, r30
 730:	ff 27       	eor	r31, r31
 732:	93 58       	subi	r25, 0x83	; 131
 734:	5f 4f       	sbci	r21, 0xFF	; 255
 736:	3a f0       	brmi	.+14     	; 0x746 <__divsf3_pse+0x70>
 738:	9e 3f       	cpi	r25, 0xFE	; 254
 73a:	51 05       	cpc	r21, r1
 73c:	78 f0       	brcs	.+30     	; 0x75c <__divsf3_pse+0x86>
 73e:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 742:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_szero>
 746:	5f 3f       	cpi	r21, 0xFF	; 255
 748:	e4 f3       	brlt	.-8      	; 0x742 <__divsf3_pse+0x6c>
 74a:	98 3e       	cpi	r25, 0xE8	; 232
 74c:	d4 f3       	brlt	.-12     	; 0x742 <__divsf3_pse+0x6c>
 74e:	86 95       	lsr	r24
 750:	77 95       	ror	r23
 752:	67 95       	ror	r22
 754:	b7 95       	ror	r27
 756:	f7 95       	ror	r31
 758:	9f 5f       	subi	r25, 0xFF	; 255
 75a:	c9 f7       	brne	.-14     	; 0x74e <__divsf3_pse+0x78>
 75c:	88 0f       	add	r24, r24
 75e:	91 1d       	adc	r25, r1
 760:	96 95       	lsr	r25
 762:	87 95       	ror	r24
 764:	97 f9       	bld	r25, 7
 766:	08 95       	ret
 768:	e1 e0       	ldi	r30, 0x01	; 1
 76a:	66 0f       	add	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	88 1f       	adc	r24, r24
 770:	bb 1f       	adc	r27, r27
 772:	62 17       	cp	r22, r18
 774:	73 07       	cpc	r23, r19
 776:	84 07       	cpc	r24, r20
 778:	ba 07       	cpc	r27, r26
 77a:	20 f0       	brcs	.+8      	; 0x784 <__divsf3_pse+0xae>
 77c:	62 1b       	sub	r22, r18
 77e:	73 0b       	sbc	r23, r19
 780:	84 0b       	sbc	r24, r20
 782:	ba 0b       	sbc	r27, r26
 784:	ee 1f       	adc	r30, r30
 786:	88 f7       	brcc	.-30     	; 0x76a <__divsf3_pse+0x94>
 788:	e0 95       	com	r30
 78a:	08 95       	ret

0000078c <__fixunssfsi>:
 78c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fp_splitA>
 790:	88 f0       	brcs	.+34     	; 0x7b4 <__fixunssfsi+0x28>
 792:	9f 57       	subi	r25, 0x7F	; 127
 794:	98 f0       	brcs	.+38     	; 0x7bc <__fixunssfsi+0x30>
 796:	b9 2f       	mov	r27, r25
 798:	99 27       	eor	r25, r25
 79a:	b7 51       	subi	r27, 0x17	; 23
 79c:	b0 f0       	brcs	.+44     	; 0x7ca <__fixunssfsi+0x3e>
 79e:	e1 f0       	breq	.+56     	; 0x7d8 <__fixunssfsi+0x4c>
 7a0:	66 0f       	add	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	1a f0       	brmi	.+6      	; 0x7b0 <__fixunssfsi+0x24>
 7aa:	ba 95       	dec	r27
 7ac:	c9 f7       	brne	.-14     	; 0x7a0 <__fixunssfsi+0x14>
 7ae:	14 c0       	rjmp	.+40     	; 0x7d8 <__fixunssfsi+0x4c>
 7b0:	b1 30       	cpi	r27, 0x01	; 1
 7b2:	91 f0       	breq	.+36     	; 0x7d8 <__fixunssfsi+0x4c>
 7b4:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__fp_zero>
 7b8:	b1 e0       	ldi	r27, 0x01	; 1
 7ba:	08 95       	ret
 7bc:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_zero>
 7c0:	67 2f       	mov	r22, r23
 7c2:	78 2f       	mov	r23, r24
 7c4:	88 27       	eor	r24, r24
 7c6:	b8 5f       	subi	r27, 0xF8	; 248
 7c8:	39 f0       	breq	.+14     	; 0x7d8 <__fixunssfsi+0x4c>
 7ca:	b9 3f       	cpi	r27, 0xF9	; 249
 7cc:	cc f3       	brlt	.-14     	; 0x7c0 <__fixunssfsi+0x34>
 7ce:	86 95       	lsr	r24
 7d0:	77 95       	ror	r23
 7d2:	67 95       	ror	r22
 7d4:	b3 95       	inc	r27
 7d6:	d9 f7       	brne	.-10     	; 0x7ce <__fixunssfsi+0x42>
 7d8:	3e f4       	brtc	.+14     	; 0x7e8 <__fixunssfsi+0x5c>
 7da:	90 95       	com	r25
 7dc:	80 95       	com	r24
 7de:	70 95       	com	r23
 7e0:	61 95       	neg	r22
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	8f 4f       	sbci	r24, 0xFF	; 255
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	08 95       	ret

000007ea <__floatunsisf>:
 7ea:	e8 94       	clt
 7ec:	09 c0       	rjmp	.+18     	; 0x800 <__floatsisf+0x12>

000007ee <__floatsisf>:
 7ee:	97 fb       	bst	r25, 7
 7f0:	3e f4       	brtc	.+14     	; 0x800 <__floatsisf+0x12>
 7f2:	90 95       	com	r25
 7f4:	80 95       	com	r24
 7f6:	70 95       	com	r23
 7f8:	61 95       	neg	r22
 7fa:	7f 4f       	sbci	r23, 0xFF	; 255
 7fc:	8f 4f       	sbci	r24, 0xFF	; 255
 7fe:	9f 4f       	sbci	r25, 0xFF	; 255
 800:	99 23       	and	r25, r25
 802:	a9 f0       	breq	.+42     	; 0x82e <__floatsisf+0x40>
 804:	f9 2f       	mov	r31, r25
 806:	96 e9       	ldi	r25, 0x96	; 150
 808:	bb 27       	eor	r27, r27
 80a:	93 95       	inc	r25
 80c:	f6 95       	lsr	r31
 80e:	87 95       	ror	r24
 810:	77 95       	ror	r23
 812:	67 95       	ror	r22
 814:	b7 95       	ror	r27
 816:	f1 11       	cpse	r31, r1
 818:	f8 cf       	rjmp	.-16     	; 0x80a <__floatsisf+0x1c>
 81a:	fa f4       	brpl	.+62     	; 0x85a <__floatsisf+0x6c>
 81c:	bb 0f       	add	r27, r27
 81e:	11 f4       	brne	.+4      	; 0x824 <__floatsisf+0x36>
 820:	60 ff       	sbrs	r22, 0
 822:	1b c0       	rjmp	.+54     	; 0x85a <__floatsisf+0x6c>
 824:	6f 5f       	subi	r22, 0xFF	; 255
 826:	7f 4f       	sbci	r23, 0xFF	; 255
 828:	8f 4f       	sbci	r24, 0xFF	; 255
 82a:	9f 4f       	sbci	r25, 0xFF	; 255
 82c:	16 c0       	rjmp	.+44     	; 0x85a <__floatsisf+0x6c>
 82e:	88 23       	and	r24, r24
 830:	11 f0       	breq	.+4      	; 0x836 <__floatsisf+0x48>
 832:	96 e9       	ldi	r25, 0x96	; 150
 834:	11 c0       	rjmp	.+34     	; 0x858 <__floatsisf+0x6a>
 836:	77 23       	and	r23, r23
 838:	21 f0       	breq	.+8      	; 0x842 <__floatsisf+0x54>
 83a:	9e e8       	ldi	r25, 0x8E	; 142
 83c:	87 2f       	mov	r24, r23
 83e:	76 2f       	mov	r23, r22
 840:	05 c0       	rjmp	.+10     	; 0x84c <__floatsisf+0x5e>
 842:	66 23       	and	r22, r22
 844:	71 f0       	breq	.+28     	; 0x862 <__stack+0x3>
 846:	96 e8       	ldi	r25, 0x86	; 134
 848:	86 2f       	mov	r24, r22
 84a:	70 e0       	ldi	r23, 0x00	; 0
 84c:	60 e0       	ldi	r22, 0x00	; 0
 84e:	2a f0       	brmi	.+10     	; 0x85a <__floatsisf+0x6c>
 850:	9a 95       	dec	r25
 852:	66 0f       	add	r22, r22
 854:	77 1f       	adc	r23, r23
 856:	88 1f       	adc	r24, r24
 858:	da f7       	brpl	.-10     	; 0x850 <__floatsisf+0x62>
 85a:	88 0f       	add	r24, r24
 85c:	96 95       	lsr	r25
 85e:	87 95       	ror	r24
 860:	97 f9       	bld	r25, 7
 862:	08 95       	ret

00000864 <__fp_inf>:
 864:	97 f9       	bld	r25, 7
 866:	9f 67       	ori	r25, 0x7F	; 127
 868:	80 e8       	ldi	r24, 0x80	; 128
 86a:	70 e0       	ldi	r23, 0x00	; 0
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	08 95       	ret

00000870 <__fp_nan>:
 870:	9f ef       	ldi	r25, 0xFF	; 255
 872:	80 ec       	ldi	r24, 0xC0	; 192
 874:	08 95       	ret

00000876 <__fp_pscA>:
 876:	00 24       	eor	r0, r0
 878:	0a 94       	dec	r0
 87a:	16 16       	cp	r1, r22
 87c:	17 06       	cpc	r1, r23
 87e:	18 06       	cpc	r1, r24
 880:	09 06       	cpc	r0, r25
 882:	08 95       	ret

00000884 <__fp_pscB>:
 884:	00 24       	eor	r0, r0
 886:	0a 94       	dec	r0
 888:	12 16       	cp	r1, r18
 88a:	13 06       	cpc	r1, r19
 88c:	14 06       	cpc	r1, r20
 88e:	05 06       	cpc	r0, r21
 890:	08 95       	ret

00000892 <__fp_round>:
 892:	09 2e       	mov	r0, r25
 894:	03 94       	inc	r0
 896:	00 0c       	add	r0, r0
 898:	11 f4       	brne	.+4      	; 0x89e <__fp_round+0xc>
 89a:	88 23       	and	r24, r24
 89c:	52 f0       	brmi	.+20     	; 0x8b2 <__fp_round+0x20>
 89e:	bb 0f       	add	r27, r27
 8a0:	40 f4       	brcc	.+16     	; 0x8b2 <__fp_round+0x20>
 8a2:	bf 2b       	or	r27, r31
 8a4:	11 f4       	brne	.+4      	; 0x8aa <__fp_round+0x18>
 8a6:	60 ff       	sbrs	r22, 0
 8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__fp_round+0x20>
 8aa:	6f 5f       	subi	r22, 0xFF	; 255
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	8f 4f       	sbci	r24, 0xFF	; 255
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	08 95       	ret

000008b4 <__fp_split3>:
 8b4:	57 fd       	sbrc	r21, 7
 8b6:	90 58       	subi	r25, 0x80	; 128
 8b8:	44 0f       	add	r20, r20
 8ba:	55 1f       	adc	r21, r21
 8bc:	59 f0       	breq	.+22     	; 0x8d4 <__fp_splitA+0x10>
 8be:	5f 3f       	cpi	r21, 0xFF	; 255
 8c0:	71 f0       	breq	.+28     	; 0x8de <__fp_splitA+0x1a>
 8c2:	47 95       	ror	r20

000008c4 <__fp_splitA>:
 8c4:	88 0f       	add	r24, r24
 8c6:	97 fb       	bst	r25, 7
 8c8:	99 1f       	adc	r25, r25
 8ca:	61 f0       	breq	.+24     	; 0x8e4 <__fp_splitA+0x20>
 8cc:	9f 3f       	cpi	r25, 0xFF	; 255
 8ce:	79 f0       	breq	.+30     	; 0x8ee <__fp_splitA+0x2a>
 8d0:	87 95       	ror	r24
 8d2:	08 95       	ret
 8d4:	12 16       	cp	r1, r18
 8d6:	13 06       	cpc	r1, r19
 8d8:	14 06       	cpc	r1, r20
 8da:	55 1f       	adc	r21, r21
 8dc:	f2 cf       	rjmp	.-28     	; 0x8c2 <__fp_split3+0xe>
 8de:	46 95       	lsr	r20
 8e0:	f1 df       	rcall	.-30     	; 0x8c4 <__fp_splitA>
 8e2:	08 c0       	rjmp	.+16     	; 0x8f4 <__fp_splitA+0x30>
 8e4:	16 16       	cp	r1, r22
 8e6:	17 06       	cpc	r1, r23
 8e8:	18 06       	cpc	r1, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	f1 cf       	rjmp	.-30     	; 0x8d0 <__fp_splitA+0xc>
 8ee:	86 95       	lsr	r24
 8f0:	71 05       	cpc	r23, r1
 8f2:	61 05       	cpc	r22, r1
 8f4:	08 94       	sec
 8f6:	08 95       	ret

000008f8 <__fp_zero>:
 8f8:	e8 94       	clt

000008fa <__fp_szero>:
 8fa:	bb 27       	eor	r27, r27
 8fc:	66 27       	eor	r22, r22
 8fe:	77 27       	eor	r23, r23
 900:	cb 01       	movw	r24, r22
 902:	97 f9       	bld	r25, 7
 904:	08 95       	ret

00000906 <__mulsf3>:
 906:	0e 94 96 04 	call	0x92c	; 0x92c <__mulsf3x>
 90a:	0c 94 49 04 	jmp	0x892	; 0x892 <__fp_round>
 90e:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_pscA>
 912:	38 f0       	brcs	.+14     	; 0x922 <__mulsf3+0x1c>
 914:	0e 94 42 04 	call	0x884	; 0x884 <__fp_pscB>
 918:	20 f0       	brcs	.+8      	; 0x922 <__mulsf3+0x1c>
 91a:	95 23       	and	r25, r21
 91c:	11 f0       	breq	.+4      	; 0x922 <__mulsf3+0x1c>
 91e:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 922:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_nan>
 926:	11 24       	eor	r1, r1
 928:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_szero>

0000092c <__mulsf3x>:
 92c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_split3>
 930:	70 f3       	brcs	.-36     	; 0x90e <__mulsf3+0x8>

00000932 <__mulsf3_pse>:
 932:	95 9f       	mul	r25, r21
 934:	c1 f3       	breq	.-16     	; 0x926 <__mulsf3+0x20>
 936:	95 0f       	add	r25, r21
 938:	50 e0       	ldi	r21, 0x00	; 0
 93a:	55 1f       	adc	r21, r21
 93c:	62 9f       	mul	r22, r18
 93e:	f0 01       	movw	r30, r0
 940:	72 9f       	mul	r23, r18
 942:	bb 27       	eor	r27, r27
 944:	f0 0d       	add	r31, r0
 946:	b1 1d       	adc	r27, r1
 948:	63 9f       	mul	r22, r19
 94a:	aa 27       	eor	r26, r26
 94c:	f0 0d       	add	r31, r0
 94e:	b1 1d       	adc	r27, r1
 950:	aa 1f       	adc	r26, r26
 952:	64 9f       	mul	r22, r20
 954:	66 27       	eor	r22, r22
 956:	b0 0d       	add	r27, r0
 958:	a1 1d       	adc	r26, r1
 95a:	66 1f       	adc	r22, r22
 95c:	82 9f       	mul	r24, r18
 95e:	22 27       	eor	r18, r18
 960:	b0 0d       	add	r27, r0
 962:	a1 1d       	adc	r26, r1
 964:	62 1f       	adc	r22, r18
 966:	73 9f       	mul	r23, r19
 968:	b0 0d       	add	r27, r0
 96a:	a1 1d       	adc	r26, r1
 96c:	62 1f       	adc	r22, r18
 96e:	83 9f       	mul	r24, r19
 970:	a0 0d       	add	r26, r0
 972:	61 1d       	adc	r22, r1
 974:	22 1f       	adc	r18, r18
 976:	74 9f       	mul	r23, r20
 978:	33 27       	eor	r19, r19
 97a:	a0 0d       	add	r26, r0
 97c:	61 1d       	adc	r22, r1
 97e:	23 1f       	adc	r18, r19
 980:	84 9f       	mul	r24, r20
 982:	60 0d       	add	r22, r0
 984:	21 1d       	adc	r18, r1
 986:	82 2f       	mov	r24, r18
 988:	76 2f       	mov	r23, r22
 98a:	6a 2f       	mov	r22, r26
 98c:	11 24       	eor	r1, r1
 98e:	9f 57       	subi	r25, 0x7F	; 127
 990:	50 40       	sbci	r21, 0x00	; 0
 992:	9a f0       	brmi	.+38     	; 0x9ba <__mulsf3_pse+0x88>
 994:	f1 f0       	breq	.+60     	; 0x9d2 <__mulsf3_pse+0xa0>
 996:	88 23       	and	r24, r24
 998:	4a f0       	brmi	.+18     	; 0x9ac <__mulsf3_pse+0x7a>
 99a:	ee 0f       	add	r30, r30
 99c:	ff 1f       	adc	r31, r31
 99e:	bb 1f       	adc	r27, r27
 9a0:	66 1f       	adc	r22, r22
 9a2:	77 1f       	adc	r23, r23
 9a4:	88 1f       	adc	r24, r24
 9a6:	91 50       	subi	r25, 0x01	; 1
 9a8:	50 40       	sbci	r21, 0x00	; 0
 9aa:	a9 f7       	brne	.-22     	; 0x996 <__mulsf3_pse+0x64>
 9ac:	9e 3f       	cpi	r25, 0xFE	; 254
 9ae:	51 05       	cpc	r21, r1
 9b0:	80 f0       	brcs	.+32     	; 0x9d2 <__mulsf3_pse+0xa0>
 9b2:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 9b6:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_szero>
 9ba:	5f 3f       	cpi	r21, 0xFF	; 255
 9bc:	e4 f3       	brlt	.-8      	; 0x9b6 <__mulsf3_pse+0x84>
 9be:	98 3e       	cpi	r25, 0xE8	; 232
 9c0:	d4 f3       	brlt	.-12     	; 0x9b6 <__mulsf3_pse+0x84>
 9c2:	86 95       	lsr	r24
 9c4:	77 95       	ror	r23
 9c6:	67 95       	ror	r22
 9c8:	b7 95       	ror	r27
 9ca:	f7 95       	ror	r31
 9cc:	e7 95       	ror	r30
 9ce:	9f 5f       	subi	r25, 0xFF	; 255
 9d0:	c1 f7       	brne	.-16     	; 0x9c2 <__mulsf3_pse+0x90>
 9d2:	fe 2b       	or	r31, r30
 9d4:	88 0f       	add	r24, r24
 9d6:	91 1d       	adc	r25, r1
 9d8:	96 95       	lsr	r25
 9da:	87 95       	ror	r24
 9dc:	97 f9       	bld	r25, 7
 9de:	08 95       	ret

000009e0 <__udivmodsi4>:
 9e0:	a1 e2       	ldi	r26, 0x21	; 33
 9e2:	1a 2e       	mov	r1, r26
 9e4:	aa 1b       	sub	r26, r26
 9e6:	bb 1b       	sub	r27, r27
 9e8:	fd 01       	movw	r30, r26
 9ea:	0d c0       	rjmp	.+26     	; 0xa06 <__udivmodsi4_ep>

000009ec <__udivmodsi4_loop>:
 9ec:	aa 1f       	adc	r26, r26
 9ee:	bb 1f       	adc	r27, r27
 9f0:	ee 1f       	adc	r30, r30
 9f2:	ff 1f       	adc	r31, r31
 9f4:	a2 17       	cp	r26, r18
 9f6:	b3 07       	cpc	r27, r19
 9f8:	e4 07       	cpc	r30, r20
 9fa:	f5 07       	cpc	r31, r21
 9fc:	20 f0       	brcs	.+8      	; 0xa06 <__udivmodsi4_ep>
 9fe:	a2 1b       	sub	r26, r18
 a00:	b3 0b       	sbc	r27, r19
 a02:	e4 0b       	sbc	r30, r20
 a04:	f5 0b       	sbc	r31, r21

00000a06 <__udivmodsi4_ep>:
 a06:	66 1f       	adc	r22, r22
 a08:	77 1f       	adc	r23, r23
 a0a:	88 1f       	adc	r24, r24
 a0c:	99 1f       	adc	r25, r25
 a0e:	1a 94       	dec	r1
 a10:	69 f7       	brne	.-38     	; 0x9ec <__udivmodsi4_loop>
 a12:	60 95       	com	r22
 a14:	70 95       	com	r23
 a16:	80 95       	com	r24
 a18:	90 95       	com	r25
 a1a:	9b 01       	movw	r18, r22
 a1c:	ac 01       	movw	r20, r24
 a1e:	bd 01       	movw	r22, r26
 a20:	cf 01       	movw	r24, r30
 a22:	08 95       	ret

00000a24 <__itoa_ncheck>:
 a24:	bb 27       	eor	r27, r27
 a26:	4a 30       	cpi	r20, 0x0A	; 10
 a28:	31 f4       	brne	.+12     	; 0xa36 <__itoa_ncheck+0x12>
 a2a:	99 23       	and	r25, r25
 a2c:	22 f4       	brpl	.+8      	; 0xa36 <__itoa_ncheck+0x12>
 a2e:	bd e2       	ldi	r27, 0x2D	; 45
 a30:	90 95       	com	r25
 a32:	81 95       	neg	r24
 a34:	9f 4f       	sbci	r25, 0xFF	; 255
 a36:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__utoa_common>

00000a3a <__utoa_ncheck>:
 a3a:	bb 27       	eor	r27, r27

00000a3c <__utoa_common>:
 a3c:	fb 01       	movw	r30, r22
 a3e:	55 27       	eor	r21, r21
 a40:	aa 27       	eor	r26, r26
 a42:	88 0f       	add	r24, r24
 a44:	99 1f       	adc	r25, r25
 a46:	aa 1f       	adc	r26, r26
 a48:	a4 17       	cp	r26, r20
 a4a:	10 f0       	brcs	.+4      	; 0xa50 <__utoa_common+0x14>
 a4c:	a4 1b       	sub	r26, r20
 a4e:	83 95       	inc	r24
 a50:	50 51       	subi	r21, 0x10	; 16
 a52:	b9 f7       	brne	.-18     	; 0xa42 <__utoa_common+0x6>
 a54:	a0 5d       	subi	r26, 0xD0	; 208
 a56:	aa 33       	cpi	r26, 0x3A	; 58
 a58:	08 f0       	brcs	.+2      	; 0xa5c <__utoa_common+0x20>
 a5a:	a9 5d       	subi	r26, 0xD9	; 217
 a5c:	a1 93       	st	Z+, r26
 a5e:	00 97       	sbiw	r24, 0x00	; 0
 a60:	79 f7       	brne	.-34     	; 0xa40 <__utoa_common+0x4>
 a62:	b1 11       	cpse	r27, r1
 a64:	b1 93       	st	Z+, r27
 a66:	11 92       	st	Z+, r1
 a68:	cb 01       	movw	r24, r22
 a6a:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <strrev>

00000a6e <strrev>:
 a6e:	dc 01       	movw	r26, r24
 a70:	fc 01       	movw	r30, r24
 a72:	67 2f       	mov	r22, r23
 a74:	71 91       	ld	r23, Z+
 a76:	77 23       	and	r23, r23
 a78:	e1 f7       	brne	.-8      	; 0xa72 <strrev+0x4>
 a7a:	32 97       	sbiw	r30, 0x02	; 2
 a7c:	04 c0       	rjmp	.+8      	; 0xa86 <strrev+0x18>
 a7e:	7c 91       	ld	r23, X
 a80:	6d 93       	st	X+, r22
 a82:	70 83       	st	Z, r23
 a84:	62 91       	ld	r22, -Z
 a86:	ae 17       	cp	r26, r30
 a88:	bf 07       	cpc	r27, r31
 a8a:	c8 f3       	brcs	.-14     	; 0xa7e <strrev+0x10>
 a8c:	08 95       	ret

00000a8e <_exit>:
 a8e:	f8 94       	cli

00000a90 <__stop_program>:
 a90:	ff cf       	rjmp	.-2      	; 0xa90 <__stop_program>
